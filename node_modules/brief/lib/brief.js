// Generated by CoffeeScript 1.4.0
var QUIET, compile, exec, fs, hljs, jade, marked, run;

fs = require('fs');

jade = require('jade');

marked = require('marked');

exec = require('child_process').exec;

hljs = require('highlight.js');

QUIET = false;

marked.setOptions({
  gfm: true,
  highlight: function(code, lang) {
    if (lang) {
      try {
        return hljs.highlight(lang, code).value;
      } catch (err) {
        throw new Error("Unable to highlight " + lang);
      }
    } else {
      return hljs.highlightAuto(code).value;
    }
  }
});

run = function(cmd, cb) {
  if (!QUIET) {
    console.log("> " + cmd);
  }
  return exec(cmd, function(err, stdout, stderr) {
    if (!QUIET) {
      if (stderr.trim()) {
        console.log(stderr.trim());
      }
      if (stdout.trim()) {
        console.log(stdout.trim());
      }
    }
    if (typeof cb === 'function') {
      return cb();
    }
  });
};

compile = function(template, content, ctx) {
  var _ref;
  if (ctx == null) {
    ctx = {};
  }
  if ((_ref = ctx.content) == null) {
    ctx.content = marked(content);
  }
  return jade.compile(template)(ctx);
};

module.exports = {
  update: function(options) {
    var branch, content, ctx, cwd, output, push, remote, template, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
    QUIET = options.quiet || false;
    cwd = process.cwd();
    if ((_ref = options.branch) == null) {
      options.branch = 'gh-pages';
    }
    if ((_ref1 = options.remote) == null) {
      options.remote = 'origin';
    }
    if ((_ref2 = options.content) == null) {
      options.content = cwd + '/README.md';
    }
    if ((_ref3 = options.output) == null) {
      options.output = cwd + '/index.html';
    }
    if ((_ref4 = options.push) == null) {
      options.push = true;
    }
    if ((_ref5 = options.template) == null) {
      options.template = cwd + '/index.jade';
    }
    if ((_ref6 = options.ctx) == null) {
      options.ctx = {};
    }
    branch = options.branch, remote = options.remote, ctx = options.ctx, output = options.output, push = options.push;
    content = fs.readFileSync(options.content, 'utf8');
    template = fs.readFileSync(options.template, 'utf8');
    return exec("git log -1 --pretty=%B", function(err, stdout, stderr) {
      var message;
      message = stdout.trim();
      if (branch === 'master') {
        fs.writeFileSync(output, compile(template, content, ctx), 'utf8');
        return run("git add " + output, function() {
          return run('git commit --amend -C HEAD', function() {
            if (push) {
              return run("git push -f " + remote + " " + branch);
            }
          });
        });
      } else {
        return run("git checkout " + branch, function() {
          return run('git reset --hard master', function() {
            fs.writeFileSync(output, compile(template, content, ctx), 'utf8');
            return run("git add " + output, function() {
              return run('git commit -m "Updating generated content"', function() {
                if (push) {
                  return run("git push -f " + remote + " " + branch);
                }
              });
            });
          });
        });
      }
    });
  }
};
